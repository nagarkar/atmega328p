<?xml version="1.0" encoding="UTF-8"?>
<model version="4.1.2" links="0">
 <documentation>See Readme.md</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="HCSR04" superclass="qpn::QActive">
   <statechart>
    <initial target="../1">
     <action>    QActive_armX((QActive *)me, 0U,
                 BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);</action>
     <initial_glyph conn="2,3,5,1,24,11,10">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="on">
     <entry brief="LED on">digitalWrite(LED_L, HIGH);</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="14,20,3,1,24,12,22">
       <action box="0,-2,16,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="14,12,22,11">
      <entry box="1,2,17,4"/>
     </state_glyph>
    </state>
    <state name="off">
     <entry brief="LED off">digitalWrite(LED_L, LOW);</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="38,38,3,1,26,-21,-28">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="38,30,22,10">
      <entry box="1,2,15,4"/>
     </state_glyph>
    </state>
    <state_diagram size="116,57"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="blinkyPinChangeMonitoring.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API
#include &lt;PciManager.h&gt;
#include &lt;PciListenerImp.h&gt;

//============================================================================
// declare all AO classes...
$declare(AOs::HCSR04)
//...

// AO instances and event queue buffers for them...
HCSR04 AO_HCSR04;

static QEvt l_HCSR04QSto[10]; // Event queue storage for Blinky
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                  },
    { (QActive *)&amp;AO_HCSR04,  l_HCSR04QSto,     Q_DIM(l_HCSR04QSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second
    LED_L = 13               // the pin number of the on-board LED (L)
};

void onPinChange(byte pin, byte changeKind);
PciListenerImp listener(LED_L, onPinChange);

void onPinChange(byte pin, byte changeKind) {
  // -- changeKind can be: CHANGEKIND_HIGH_TO_LOW, or CHANGEKIND_LOW_TO_HIGH HIGH
  Serial.print(&quot;pci on pin: &quot;);
  Serial.print(pin);
  Serial.print(&quot;changeKind: &quot;);
  Serial.println(changeKind);
}

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_HCSR04.super, Q_STATE_CAST(&amp;HCSR04_initial));

    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial.begin(9800);
    PciManager.registerListener(&amp;listener);
    Serial.println(&quot;Ready.&quot;);
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
    // set Timer2 in CTC mode, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20); // CTC mode
    // Set Timer2 prescaler to 1/1024 
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10, Clock / 1024 

    //select asynchronous operation of timer2 (32,768kHz)
    // For more on ASSR, see https://goo.gl/nsi2DB
    ASSR  &amp;= ~(1U &lt;&lt; AS2);

    // enable TIMER2 compare Interrupt
    TIMSK2 = (1U &lt;&lt; OCIE2A); 

    // Reset timer count
    TCNT2  = 0U; 

    // set the output-compare register based on the desired tick frequency
    // OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::HCSR04)
//...
</text>
  </file>
  <file name="notes.txt">
   <text>The following code works:
ISR(TIMER4_OVF_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

// Timer/Counter 4 initialization
// Clock: Sync. 15.625 kHz
// Mode: Normal top=OCR4C
// OC4A output: OC4A=Disc. /OC4A=Disc.
// OC4B output: OC4B=Disc. /OC4B=Disc.
// OC4D output: OC4D=Disc. /OC4D=Disc.
// Fault Protection: Off
// Fault Protection Noise Canceler: Off
// Fault Protection triggered on Falling Edge
// Timer4 Overflow Interrupt: On
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare D Match Interrupt: Off
// Fault Protection Interrupt: Off
// Dead Time Prescaler: 1
// Dead Time Rising Edge: 0.000 us
// Dead Time Falling Edge: 0.000 us
// Timer Period: 40 ms

// Set Timer4 for synchronous operation
PLLFRQ&amp;=(1&lt;&lt;PINMUX) | (1&lt;&lt;PLLUSB) | (0&lt;&lt;PLLTM1) | (0&lt;&lt;PLLTM0) | (1&lt;&lt;PDIV3) | (1&lt;&lt;PDIV2) | (1&lt;&lt;PDIV1) | (1&lt;&lt;PDIV0);

TCCR4A=(0&lt;&lt;COM4A1) | (0&lt;&lt;COM4A0) | (0&lt;&lt;COM4B1) | (0&lt;&lt;COM4B0) | (0&lt;&lt;FOC4A) | (0&lt;&lt;FOC4B) | (0&lt;&lt;PWM4A) | (0&lt;&lt;PWM4B);
TCCR4B=(0&lt;&lt;PWM4X) | (0&lt;&lt;PSR4) | (0&lt;&lt;DTPS41) | (0&lt;&lt;DTPS40) | (1&lt;&lt;CS43) | (0&lt;&lt;CS42) | (1&lt;&lt;CS41) | (1&lt;&lt;CS40);
TCCR4C=(0&lt;&lt;COM4A1S) | (0&lt;&lt;COM4A0S) | (0&lt;&lt;COM4B1S) | (0&lt;&lt;COM4B0S) | (0&lt;&lt;COM4D1) | (0&lt;&lt;COM4D0) | (0&lt;&lt;FOC4D) | (0&lt;&lt;PWM4D);
TCCR4D=(0&lt;&lt;FPIE4) | (0&lt;&lt;FPEN4) | (0&lt;&lt;FPNC4) | (0&lt;&lt;FPES4) | (0&lt;&lt;FPAC4) | (0&lt;&lt;FPF4) | (0&lt;&lt;WGM41) | (0&lt;&lt;WGM40);
TCCR4E=(0&lt;&lt;TLOCK4) | (0&lt;&lt;ENHC4) | (0&lt;&lt;OC4OE5) | (0&lt;&lt;OC4OE4) | (0&lt;&lt;OC4OE3) | (0&lt;&lt;OC4OE2) | (0&lt;&lt;OC4OE1) | (0&lt;&lt;OC4OE0);
TC4H=0x00;
TCNT4=0x00;
TC4H=0x00;
OCR4A=0x00;
TC4H=0x00;
OCR4B=0x00;
//TC4H=0x02;
OCR4C = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U; //OCR4C  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
//OCR4C=0x70;
TC4H=0x00;
OCR4D=0x00;
DT4=0x00;

// Timer/Counter 4 Interrupt(s) initialization
TIMSK4=(0&lt;&lt;OCIE4D) | (0&lt;&lt;OCIE4A) | (0&lt;&lt;OCIE4B) | (1&lt;&lt;TOIE4);


******************
</text>
  </file>
 </directory>
</model>
