/*$file${.::hc_sr04_multiple.ino} ##########################################*/
/*
* Model: hc_sr04_multiple.qm
* File:  ${.::hc_sr04_multiple.ino}
*
* This code has been generated by QM tool (https://state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::hc_sr04_multiple.ino} #######################################*/
#define Q_PARAM_SIZE 4 // 32 bit parameters (e.g. pointers) passed between events.


#include "qpn.h"     // QP-nano framework
#include "Arduino.h" // Arduino API
#include <PciManager.h>
#include <PciListenerImp.h>
#include <ST_HW_HC_SR04.h>


#define SR04_ECHO_PIN_0 7
#define SR04_TRIG_PIN_0 8

#define SR04_ECHO_PIN_1 9
#define SR04_TRIG_PIN_1 10

#define SR04_ECHO_PIN_2 11
#define SR04_TRIG_PIN_2 12


//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second
};

enum Signals {
 ECHO_START_SIG = Q_USER_SIG,
 ECHO_END_SIG,
 MAXSIGS
};


//============================================================================
// declare all AO classes...
/*$declare${AOs::HCSR04} ###################################################*/
/*${AOs::HCSR04} ...........................................................*/
typedef struct HCSR04 {
/* protected: */
    QActive super;

/* public: */
    ST_HW_HC_SR04 * sensor;
    long echo_start_time = 0;
    long echo_time = 0;
    int distance_cm = 0;
    unsigned long n_measurements = 0;
    unsigned long start_time_micros;
    unsigned long min_measurement_interval_micros = 25*1000;
    uint8_t state_id;
} HCSR04;

/* protected: */
static QState HCSR04_initial(HCSR04 * const me);
static QState HCSR04_wait_for_echo(HCSR04 * const me);
static QState HCSR04_wait_for_echo_done(HCSR04 * const me);
static QState HCSR04_throttle_wait(HCSR04 * const me);
/*$enddecl${AOs::HCSR04} ###################################################*/
/*$declare${AOs::HCSR04Meas} ###############################################*/
/*${AOs::HCSR04Meas} .......................................................*/
typedef struct HCSR04Meas {
/* protected: */
    QActive super;

/* public: */
    HCSR04 ** AO_HCSR04;
    const int period = 3;
    unsigned long elapsed_time;
    unsigned long prev_nMeasurements;
    int n_AOs;
} HCSR04Meas;

/* protected: */
static QState HCSR04Meas_initial(HCSR04Meas * const me);
static QState HCSR04Meas_Measure(HCSR04Meas * const me);
/*$enddecl${AOs::HCSR04Meas} ###############################################*/
//...


// Create Pin Change Listeners
void onPinChange(byte pin, byte changeKind);
PciListenerImp listener_0(SR04_ECHO_PIN_0, onPinChange);
PciListenerImp listener_1(SR04_ECHO_PIN_1, onPinChange);
PciListenerImp listener_2(SR04_ECHO_PIN_2, onPinChange);

// Create Sensors
ST_HW_HC_SR04 ultrasonicSensor_0(SR04_TRIG_PIN_0, SR04_ECHO_PIN_0);
ST_HW_HC_SR04 ultrasonicSensor_1(SR04_TRIG_PIN_1, SR04_ECHO_PIN_1);
ST_HW_HC_SR04 ultrasonicSensor_2(SR04_TRIG_PIN_2, SR04_ECHO_PIN_2);


// Create AO instances and event queue buffers for them...
HCSR04 AO_HCSR04_0;
HCSR04 AO_HCSR04_1;
HCSR04 AO_HCSR04_2;

HCSR04* AO_HCSR04_Array[3] = {&AO_HCSR04_0, &AO_HCSR04_1, &AO_HCSR04_2};

HCSR04Meas AO_HCSR04Meas;

// Define the pinchange event handler
void onPinChange(byte pin, byte changeKind) {
    //Serial.print("Pn:"); Serial.println(pin);
    //Serial.print("Ck:"); Serial.println(changeKind);
    Signals sig = ECHO_END_SIG;
    if (changeKind == CHANGEKIND_LOW_TO_HIGH) {
        sig = ECHO_START_SIG;
    }
    HCSR04 * l_AO_HCSR04 = 0;
    switch(pin) {
        case SR04_ECHO_PIN_0:
            l_AO_HCSR04 = &AO_HCSR04_0;
            break;
        case SR04_ECHO_PIN_1:
            l_AO_HCSR04 = &AO_HCSR04_1;
            break;
        case SR04_ECHO_PIN_2:
            l_AO_HCSR04 = &AO_HCSR04_2;
            break;
        default:
            Serial.println("Fatal: Unknown Pin Interrupt");
            break;
    }
    if (l_AO_HCSR04 != 0) {
        QActive_postXISR_((QActive *)l_AO_HCSR04, 1U, sig, 0U);
        return;
    }
}

static QEvt l_HCSR04_0_QSto[10];
static QEvt l_HCSR04_1_QSto[10];
static QEvt l_HCSR04_2_QSto[10];

static QEvt l_HCSR04MeasQSto[10];
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,               (QEvt *)0,        0U                          },

    { (QActive *)&AO_HCSR04_0,    l_HCSR04_0_QSto,  Q_DIM(l_HCSR04_0_QSto)      },
    { (QActive *)&AO_HCSR04_1,    l_HCSR04_1_QSto,  Q_DIM(l_HCSR04_1_QSto)      },
    { (QActive *)&AO_HCSR04_2,    l_HCSR04_2_QSto,  Q_DIM(l_HCSR04_2_QSto)      },

    { (QActive *)&AO_HCSR04Meas,  l_HCSR04MeasQSto, Q_DIM(l_HCSR04MeasQSto)     }
};


//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    AO_HCSR04_0.sensor = &ultrasonicSensor_0;
    QActive_ctor(&AO_HCSR04_0.super,     Q_STATE_CAST(&HCSR04_initial));
    AO_HCSR04_1.sensor = &ultrasonicSensor_1;
    QActive_ctor(&AO_HCSR04_1.super,     Q_STATE_CAST(&HCSR04_initial));
    AO_HCSR04_2.sensor = &ultrasonicSensor_2;
    QActive_ctor(&AO_HCSR04_2.super,     Q_STATE_CAST(&HCSR04_initial));

    AO_HCSR04Meas.AO_HCSR04 = AO_HCSR04_Array;
    AO_HCSR04Meas.n_AOs = sizeof(AO_HCSR04_Array)/sizeof(HCSR04 *);


    QActive_ctor(&AO_HCSR04Meas.super, Q_STATE_CAST(&HCSR04Meas_initial));

    Serial.begin(38400);
    PciManager.registerListener(&listener_0);
    PciManager.registerListener(&listener_1);
    PciManager.registerListener(&listener_2);
    Serial.println("ready");
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
    // set Timer2 in CTC mode, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20); // CTC mode
    // Set Timer2 prescaler to 1/1024
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10, Clock / 1024

    //select asynchronous operation of timer2 (32,768kHz)
    // For more on ASSR, see https://goo.gl/nsi2DB
    ASSR  &= ~(1U << AS2);

    // enable TIMER2 compare Interrupt
    TIMSK2 = (1U << OCIE2A);

    // Reset timer count
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    // OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
/*$define${AOs::HCSR04} ####################################################*/
/* Check for the minimum required QP version */
#if ((QP_VERSION < 601) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 6.0.1 or higher required
#endif
/*${AOs::HCSR04} ...........................................................*/
/*${AOs::HCSR04::SM} .......................................................*/
static QState HCSR04_initial(HCSR04 * const me) {
    /*${AOs::HCSR04::SM::initial} */
    Serial.print("Sensor Started at Echo Pin:"); Serial.println(me->sensor->getEchoPin());
    //Serial.print("State Machine address:"); Serial.println((int)me);

    me->echo_time = 0;
    me->distance_cm = 0;
    return Q_TRAN(&HCSR04_wait_for_echo);
}
/*${AOs::HCSR04::SM::wait_for_echo} ........................................*/
static QState HCSR04_wait_for_echo(HCSR04 * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::HCSR04::SM::wait_for_echo} */
        case Q_ENTRY_SIG: {
            me->state_id = 0;

            QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/10, 0);

            // Record start time and trigger pulse
            me->start_time_micros = micros();
            me->sensor->triggerPulse();

            //Serial.println("ST");
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            Serial.print("Timeout1");
            status_ = Q_TRAN(&HCSR04_wait_for_echo);
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo::ECHO_START} */
        case ECHO_START_SIG: {
            me->echo_start_time = micros();
            //Serial.println((unsigned int)me->echo_start_time);
            status_ = Q_TRAN(&HCSR04_wait_for_echo_done);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::HCSR04::SM::wait_for_echo_done} ...................................*/
static QState HCSR04_wait_for_echo_done(HCSR04 * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::HCSR04::SM::wait_for_echo_done} */
        case Q_ENTRY_SIG: {
            me->state_id = 0;

            QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/10, 0);

            //Serial.println("In Done");
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo_done} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo_do~::ECHO_END} */
        case ECHO_END_SIG: {
            unsigned long now = micros();
            //Serial.println((unsigned int)now);

            //me->echo_time = max(0, now - me->echo_start_time);
            me->echo_time = now - me->echo_start_time;

            // Divide by 2 to account for the roundtrip
            // 29 is a fixed constant based on the speed of sound.
            me->distance_cm = me->echo_time/(2*29);

            //Serial.print(me->sensor->getEchoPin()); Serial.print(":");
            //Serial.println(me->distance_cm);
            //Serial.println("Time:");Serial.println(me->echo_time);

            me->n_measurements++;
            status_ = Q_TRAN(&HCSR04_throttle_wait);
            break;
        }
        /*${AOs::HCSR04::SM::wait_for_echo_do~::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            Serial.print("Timeout2");
            status_ = Q_TRAN(&HCSR04_wait_for_echo);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::HCSR04::SM::throttle_wait} ........................................*/
static QState HCSR04_throttle_wait(HCSR04 * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::HCSR04::SM::throttle_wait} */
        case Q_ENTRY_SIG: {
            int timer_interval_ms = (me->min_measurement_interval_micros - me->echo_time)/1000;

            if (timer_interval_ms > 0) {
                QActive_armX((QActive *)me, 0U, timer_interval_ms, 0);
            } else {
                Q_TRAN(&HCSR04_wait_for_echo);
            }
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::throttle_wait} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04::SM::throttle_wait::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&HCSR04_wait_for_echo);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::HCSR04} ####################################################*/
/*$define${AOs::HCSR04Meas} ################################################*/
/*${AOs::HCSR04Meas} .......................................................*/
/*${AOs::HCSR04Meas::SM} ...................................................*/
static QState HCSR04Meas_initial(HCSR04Meas * const me) {
    /*${AOs::HCSR04Meas::SM::initial} */
    int timerInterval = me->period*BSP_TICKS_PER_SEC;
    QActive_armX((QActive *)me, 0U, timerInterval , timerInterval);
    return Q_TRAN(&HCSR04Meas_Measure);
}
/*${AOs::HCSR04Meas::SM::Measure} ..........................................*/
static QState HCSR04Meas_Measure(HCSR04Meas * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::HCSR04Meas::SM::Measure} */
        case Q_ENTRY_SIG: {

            //Serial.print("First Array loc'n:");Serial.println((int)&me->AO_HCSR04[0]);

            if (me->elapsed_time > 0) {
                for (int i = 0; i < me->n_AOs; i++) {
                    Serial.print("Sensor with echo pin:");
                    Serial.println(me->AO_HCSR04[i]->sensor->getEchoPin());

                    unsigned long nMeasurements = me->AO_HCSR04[i]->n_measurements;
                    int distance_cm = me->AO_HCSR04[i]->distance_cm;
                    long echo_time = me->AO_HCSR04[i]->echo_time;
                    uint8_t state_id = me->AO_HCSR04[i]->state_id;

                    Serial.print("nMeasurements:");
                    Serial.println(nMeasurements);
                    Serial.print("Cum Meas/sec:");
                    Serial.println(nMeasurements/me->elapsed_time);
                    Serial.print("State:");
                    Serial.println(state_id);
                    Serial.print("Last Distance Measured:");
                    Serial.println(distance_cm);
                    Serial.print("Last Echo Time:");
                    Serial.println(echo_time);


                    if (i == 0) {
                        Serial.print("Meas/sec (this period, first Sensor):");
                        Serial.println((nMeasurements - me->prev_nMeasurements)/me->period);
                        me->prev_nMeasurements = nMeasurements;
                    }
                    Serial.println("-----------------");
                }

                Serial.println("*****************************");
            }


            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::HCSR04Meas::SM::Measure::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            me->elapsed_time += me->period;
            status_ = Q_TRAN(&HCSR04Meas_Measure);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::HCSR04Meas} ################################################*/
//...
